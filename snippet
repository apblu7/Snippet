import javafx.application.Application;
import javafx.concurrent.Task;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;

import java.io.*;
import java.net.URL;
import java.nio.file.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class Main extends Application {

    private static final String DOWNLOAD_URL = "https://github.com/apblu7/Snippet/archive/main.zip";
    private static final String DOWNLOAD_DIR = "C:/download";
    private static final String TARGET_FILE = "Snippet-main/Snippet";

    private TextArea textArea;

    public static void main(String[] args) {
        launch(args);
    }

    @Override
    public void start(Stage primaryStage) {
        textArea = new TextArea();
        textArea.setEditable(false);
        textArea.setWrapText(true);

        Button downloadButton = new Button("다운로드 및 추출");
        downloadButton.setOnAction(e -> {
            Task<Void> task = new Task<Void>() {
                @Override
                protected Void call() throws Exception {
                    downloadAndExtract();
                    return null;
                }
            };
            task.setOnSucceeded(ev -> {
                String extractedText = readTextFromFile();
                textArea.setText(extractedText);
            });
            new Thread(task).start();
        });

        VBox vbox = new VBox(10);
        vbox.setPadding(new Insets(10));
        vbox.getChildren().addAll(downloadButton, textArea);

        StackPane root = new StackPane(vbox);
        Scene scene = new Scene(root, 800, 600);
        primaryStage.setScene(scene);
        primaryStage.setTitle("Java 8 - Snippet Viewer");
        primaryStage.show();

        textArea.prefWidthProperty().bind(scene.widthProperty().subtract(20));
        textArea.prefHeightProperty().bind(scene.heightProperty().subtract(100));
    }

    private void downloadAndExtract() {
        try {
            URL url = new URL(DOWNLOAD_URL);
            String zipFilePath = DOWNLOAD_DIR + "/main.zip";

            try (InputStream in = url.openStream();
                 FileOutputStream out = new FileOutputStream(zipFilePath)) {
                byte[] buffer = new byte[1024];
                int len;
                while ((len = in.read(buffer)) != -1) {
                    out.write(buffer, 0, len);
                }
            }

            unzip(zipFilePath, DOWNLOAD_DIR);
            Files.deleteIfExists(Paths.get(zipFilePath));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void unzip(String zipFilePath, String destDirectory) throws IOException {
        byte[] buffer = new byte[1024];
        ZipInputStream zis = new ZipInputStream(new FileInputStream(zipFilePath));
        ZipEntry zipEntry = zis.getNextEntry();
        while (zipEntry != null) {
            File newFile = new File(destDirectory + File.separator + zipEntry.getName());
            if (zipEntry.isDirectory()) {
                newFile.mkdirs();
            } else {
                new File(newFile.getParent()).mkdirs();
                FileOutputStream fos = new FileOutputStream(newFile);
                int len;
                while ((len = zis.read(buffer)) > 0) {
                    fos.write(buffer, 0, len);
                }
                fos.close();
            }
            zipEntry = zis.getNextEntry();
        }
        zis.closeEntry();
        zis.close();
    }

    private String readTextFromFile() {
        Path filePath = Paths.get(DOWNLOAD_DIR, TARGET_FILE);
        try {
            byte[] bytes = Files.readAllBytes(filePath);
            return new String(bytes);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return "파일을 읽는 데 실패했습니다.";
    }
}