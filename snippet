import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.mybatis.spring.SqlSessionTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import java.sql.*;
import java.time.LocalDateTime;

@Aspect
@Component
public class SchedulerLogAspect {

    @Autowired
    private SqlSessionTemplate sqlSession;

    @PostConstruct
    public void init() {
        String ddl = "CREATE TABLE IF NOT EXISTS scheduler_log (" +
                     "id SERIAL PRIMARY KEY, " +
                     "method_name VARCHAR(200), " +
                     "start_time TIMESTAMP, " +
                     "end_time TIMESTAMP, " +
                     "message TEXT, " +
                     "result BOOLEAN)";
        try (Statement stmt = sqlSession.getConnection().createStatement()) {
            stmt.executeUpdate(ddl);
        } catch (SQLException e) {
            throw new RuntimeException("테이블 생성 실패", e);
        }
    }

    @Around("execution(* com.example.target..*(..))")
    public Object logSchedulerExecution(ProceedingJoinPoint pjp) throws Throwable {
        LocalDateTime start = LocalDateTime.now();
        LocalDateTime end;
        String message = null;
        boolean result;
        String methodName = pjp.getSignature().toShortString();

        try {
            Object ret = pjp.proceed();
            result = true;
            return ret;
        } catch (Throwable t) {
            message = t.getMessage();
            result = false;
            throw t;
        } finally {
            end = LocalDateTime.now();

            String insertSql = "INSERT INTO scheduler_log (method_name, start_time, end_time, message, result) " +
                               "VALUES (?, ?, ?, ?, ?)";
            try (PreparedStatement pstmt = sqlSession.getConnection().prepareStatement(insertSql)) {
                pstmt.setString(1, methodName);
                pstmt.setTimestamp(2, Timestamp.valueOf(start));
                pstmt.setTimestamp(3, Timestamp.valueOf(end));
                pstmt.setString(4, message);
                pstmt.setBoolean(5, result);
                pstmt.executeUpdate();
            } catch (SQLException e) {
                System.err.println("로그 저장 실패: " + e.getMessage());
            }
        }
    }
}