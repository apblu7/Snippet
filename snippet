import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class SbomToNisExcelFinal {
    public static void main(String[] args) {
        String inputJsonPath = "C:\\path\\to\\bom.json";     // 입력 bom.json 경로
        String outputExcelPath = "C:\\path\\to\\bom.xlsx";   // 출력 엑셀 경로

        List<String> headers = Arrays.asList(
                "01. SBOM Standard", "02. SBOM Type", "03. CycloneDX No.", "04. SPDX Doc. ID", "05. SBOM ID",
                "06. Product Name", "07. Product Version", "08. Component Name", "09. Component Alias", "10. Component Version",
                "11. Component Supplier Name", "12. Component Hash", "13. Component Path", "14. Unique Identifier", "15. Dependency Relationship",
                "16. Timestamp", "17. License Name·Version", "18. Vul. DB", "19. Vul. Info", "20. SBOM 생성일시"
        );

        try {
            ObjectMapper mapper = new ObjectMapper();
            JsonNode root = mapper.readTree(new File(inputJsonPath));
            JsonNode components = root.path("components");
            JsonNode dependencies = root.path("dependencies");

            String cyclonedxNo = root.path("serialNumber").asText("");
            String timestamp = root.path("metadata").path("timestamp").asText("");
            String today = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd"));
            String sbomId = "WINITECH-" + today + "-" + UUID.randomUUID().toString().substring(0, 6).toUpperCase();
            String generatedAt = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"));

            // purl 기준 의존성 관계 정리
            Map<String, List<String>> dependencyMap = new HashMap<>();
            for (JsonNode dep : dependencies) {
                String ref = dep.path("ref").asText();
                List<String> depList = new ArrayList<>();
                for (JsonNode d : dep.path("dependsOn")) {
                    depList.add(d.asText());
                }
                dependencyMap.put(ref, depList);
            }

            // ref(purl) → groupId:artifactId:version
            Map<String, String> refToGAV = new HashMap<>();
            for (JsonNode comp : components) {
                String purl = comp.path("purl").asText();
                String group = comp.path("group").asText();
                String name = comp.path("name").asText();
                String version = comp.path("version").asText();
                if (!purl.isEmpty()) {
                    refToGAV.put(purl, group + ":" + name + ":" + version);
                }
            }

            Workbook workbook = new XSSFWorkbook();
            Sheet sheet = workbook.createSheet("NIS-SBOM");
            Row headerRow = sheet.createRow(0);
            for (int i = 0; i < headers.size(); i++) {
                headerRow.createCell(i).setCellValue(headers.get(i));
            }

            int rowIdx = 1;
            for (JsonNode comp : components) {
                Row row = sheet.createRow(rowIdx++);
                int col = 0;

                String name = comp.path("name").asText("");
                String version = comp.path("version").asText("");
                String group = comp.path("group").asText("");
                String purl = comp.path("purl").asText("");
                String alias = name;
                String license = comp.path("licenses").path(0).path("license").path("id").asText("");

                // 공급자 추출
                String supplier = "";
                if (comp.has("supplier") && comp.path("supplier").has("name")) {
                    supplier = comp.path("supplier").path("name").asText("");
                } else if (comp.has("publisher")) {
                    supplier = comp.path("publisher").asText("");
                }

                // SHA-256 해시
                String hash = "";
                JsonNode hashes = comp.path("hashes");
                if (hashes.isArray()) {
                    for (JsonNode h : hashes) {
                        if ("SHA-256".equalsIgnoreCase(h.path("alg").asText())) {
                            hash = h.path("content").asText();
                            break;
                        }
                    }
                }

                String path = "WEB-INF/lib/" + name + "-" + version + ".jar";

                // 의존성: group:artifact:version 형식, 줄바꿈으로 정리
                List<String> deps = dependencyMap.getOrDefault(purl, Collections.emptyList());
                List<String> depGAVs = new ArrayList<>();
                for (String ref : deps) {
                    String gav = refToGAV.getOrDefault(ref, "");
                    if (!gav.isEmpty()) depGAVs.add(gav);
                }
                String depStr = String.join("\n", depGAVs);

                row.createCell(col++).setCellValue("CycloneDX");       // 1
                row.createCell(col++).setCellValue("Deployed");        // 2
                row.createCell(col++).setCellValue(cyclonedxNo);       // 3
                row.createCell(col++).setCellValue("");                // 4
                row.createCell(col++).setCellValue(sbomId);            // 5
                row.createCell(col++).setCellValue("ETS");             // 6
                row.createCell(col++).setCellValue("1.0");             // 7
                row.createCell(col++).setCellValue(name);              // 8
                row.createCell(col++).setCellValue(alias);             // 9
                row.createCell(col++).setCellValue(version);           // 10
                row.createCell(col++).setCellValue(supplier);          // 11
                row.createCell(col++).setCellValue(hash);              // 12
                row.createCell(col++).setCellValue(path);              // 13
                row.createCell(col++).setCellValue(purl);              // 14
                row.createCell(col++).setCellValue(depStr);            // 15
                row.createCell(col++).setCellValue(timestamp);         // 16
                row.createCell(col++).setCellValue(license);           // 17
                row.createCell(col++).setCellValue("NVD");             // 18
                row.createCell(col++).setCellValue("");                // 19
                row.createCell(col++).setCellValue(generatedAt);       // 20
            }

            try (FileOutputStream out = new FileOutputStream(outputExcelPath)) {
                workbook.write(out);
                System.out.println("NIS-SBOM Excel 생성 완료: " + outputExcelPath);
            }
            workbook.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}