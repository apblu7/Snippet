[!DOCTYPE html]
[html lang="ko"]
[head]
  [meta charset="UTF-8" /]
  [title]HTTP 테스트 리포트 (요약 + 타임아웃)[/title]
  [style]
    body { font-family: sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
    h1 { margin-bottom: 10px; }
    #summary {
      background: #fff;
      border: 1px solid #ccc;
      padding: 15px;
      border-radius: 6px;
      margin-bottom: 20px;
      max-height: 150px;
      overflow-y: auto;
    }
    #summary .success { color: green; }
    #summary .fail { color: red; }
    #summary-item {
      border-bottom: 1px solid #ddd;
      padding: 6px 0;
      font-size: 14px;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
    }
    #report .result {
      background: #fff;
      border: 1px solid #ccc;
      margin-bottom: 20px;
      padding: 15px;
      border-radius: 6px;
    }
    .status { font-weight: bold; }
    .success { color: green; }
    .fail { color: red; }
    pre {
      background: #f0f0f0;
      padding: 10px;
      overflow-x: auto;
      white-space: pre-wrap;
      word-break: break-word;
      max-height: 250px;
    }
    details summary {
      font-weight: bold;
      cursor: pointer;
    }
  [/style]
[/head]
[body]

  [h1]HTTP 테스트 리포트[/h1]

  [div id="summary"]
    [div][strong]전체 요청 요약[/strong][/div]
    [div id="summary-stats"][/div]
    [div id="summary-list"][/div]
  [/div]

  [div id="report"][/div]

  [script]
    const GLOBAL_TIMEOUT = 5000;

    const requests = [
      {
        name: "사용자 목록",
        method: "GET",
        url: "https://jsonplaceholder.typicode.com/users",
        headers: {
          "Accept": "application/json"
        }
      },
      {
        name: "없는 페이지 테스트",
        method: "GET",
        url: "https://jsonplaceholder.typicode.com/404",
        headers: {}
      }
    ];

    const report = document.getElementById('report');
    const summaryStats = document.getElementById('summary-stats');
    const summaryList = document.getElementById('summary-list');

    function fetchWithTimeout(url, options = {}, timeout = GLOBAL_TIMEOUT) {
      const controller = new AbortController();
      const id = setTimeout(() => controller.abort(), timeout);
      return fetch(url, { ...options, signal: controller.signal })
        .finally(() => clearTimeout(id));
    }

    const elements = requests.map((req, index) => {
      const box = document.createElement('div');
      box.className = 'result';
      box.id = `result-${index}`;
      box.innerHTML = `
        [h2]${req.name}[/h2]
        [p][span class="status"]요청 전[/span][/p]
        [details][summary]Request[/summary][pre]${req.method} ${req.url}
${Object.entries(req.headers).map(([k, v]) => `${k}: ${v}`).join('\n')}[/pre][/details]
        [details][summary]Response Headers[/summary][pre]대기중...[/pre][/details]
        [details open][summary]Response Body[/summary][pre]대기중...[/pre][/details]
      `.replace(/\[/g, '<').replace(/\]/g, '>');
      report.appendChild(box);

      const summaryItem = document.createElement('div');
      summaryItem.className = 'summary-item';
      summaryItem.id = `summary-${index}`;
      summaryItem.style.marginBottom = '4px';
      summaryItem.textContent = `${req.name} - 대기중...`;
      summaryList.appendChild(summaryItem);

      return { box, summaryItem };
    });

    let successCount = 0;
    let failCount = 0;

    requests.forEach((req, index) => {
      const { box, summaryItem } = elements[index];
      const statusEl = box.querySelector('.status');
      const resHeadersEl = box.querySelectorAll('pre')[1];
      const resBodyEl = box.querySelectorAll('pre')[2];

      fetchWithTimeout(req.url, {
        method: req.method,
        headers: req.headers
      }, GLOBAL_TIMEOUT)
        .then(async res => {
          const headers = Array.from(res.headers.entries())
            .map(([k, v]) => `${k}: ${v}`).join('\n');
          const bodyText = await res.text();

          statusEl.textContent = `${res.status} ${res.statusText}`;
          statusEl.className = 'status ' + (res.ok ? 'success' : 'fail');
          resHeadersEl.textContent = headers || '[없음]';
          resBodyEl.textContent = bodyText || '[빈 응답]';

          const oneLineBody = bodyText.trim().split('\n')[0].slice(0, 80);
          summaryItem.textContent = `${req.name} - ${res.status} ${res.statusText} - ${oneLineBody}`;
          summaryItem.className = res.ok ? 'success' : 'fail';

          if(res.ok) successCount++;
          else failCount++;

          summaryStats.textContent = `성공: ${successCount}건 / 실패: ${failCount}건 / 전체: ${requests.length}건`;
        })
        .catch(err => {
          statusEl.textContent = `요청 실패`;
          statusEl.className = 'status fail';
          resHeadersEl.textContent = '';
          resBodyEl.textContent = err.name === 'AbortError' ? '요청 시간 초과' : err.message;

          summaryItem.textContent = `${req.name} - 요청 실패 - ${err.name === 'AbortError' ? '시간 초과' : err.message}`;
          summaryItem.className = 'fail';

          failCount++;
          summaryStats.textContent = `성공: ${successCount}건 / 실패: ${failCount}건 / 전체: ${requests.length}건`;
        });
    });
  [/script]
[/body]
[/html]