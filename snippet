import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.util.*;

public class Sbom2Excel {
    public static void main(String[] args) {
        String inputJsonPath = "C:\\\\dpg-dev\\\\eGovFrameDev-4.2.0-64bit\\\\workspace\\\\ets\\\\target\\\\bom.json";
        String outputExcelPath = "C:\\\\dpg-dev\\\\eGovFrameDev-4.2.0-64bit\\\\workspace\\\\ets\\\\target\\\\bom.xlsx";

        List<String> headers = Arrays.asList(
                "SBOM 검증 도구", "공급자", "저작권자", "컴포넌트 이름", "버전",
                "고유 식별자", "컴포넌트 해시", "라이선스 명", "라이선스 결합 형태",
                "보안 취약점 DB", "관계성", "릴리즈 날짜", "CVE ID", "CVSS Base Score",
                "CVSS Severity", "SBOM 작성자 정보", "SBOM 작성 일시", "SBOM 버전",
                "SBOM 형식", "SBOM ID"
        );

        try {
            ObjectMapper mapper = new ObjectMapper();
            JsonNode rootNode = mapper.readTree(new File(inputJsonPath));
            JsonNode componentsNode = rootNode.get("components");

            if (componentsNode == null || !componentsNode.isArray()) {
                System.out.println("'components' 배열을 찾을 수 없습니다.");
                return;
            }

            Workbook workbook = new XSSFWorkbook();
            Sheet sheet = workbook.createSheet("SBOM");

            // 헤더
            Row headerRow = sheet.createRow(0);
            for (int i = 0; i < headers.size(); i++) {
                Cell cell = headerRow.createCell(i);
                cell.setCellValue(headers.get(i));
            }

            // 데이터
            int rowIndex = 1;
            for (JsonNode component : componentsNode) {
                Row row = sheet.createRow(rowIndex++);
                int cellIndex = 0;

                row.createCell(cellIndex++).setCellValue("CycloneDX Maven Plugin"); // 검증 도구
                row.createCell(cellIndex++).setCellValue(component.path("supplier").asText(""));
                row.createCell(cellIndex++).setCellValue(""); // 저작권자
                row.createCell(cellIndex++).setCellValue(component.path("name").asText(""));
                row.createCell(cellIndex++).setCellValue(component.path("version").asText(""));
                row.createCell(cellIndex++).setCellValue(component.path("purl").asText(""));
                JsonNode hashes = component.path("hashes");
                if (hashes.isArray() && hashes.size() > 0) {
                    row.createCell(cellIndex++).setCellValue(hashes.get(0).path("content").asText());
                } else {
                    row.createCell(cellIndex++).setCellValue("");
                }
                row.createCell(cellIndex++).setCellValue(component.path("licenses").path(0).path("license").path("id").asText(""));
                row.createCell(cellIndex++).setCellValue(""); // 라이선스 결합 형태
                row.createCell(cellIndex++).setCellValue("NVD"); // 보안 DB
                row.createCell(cellIndex++).setCellValue("IncludeComponent");
                row.createCell(cellIndex++).setCellValue(""); // 릴리즈 날짜
                row.createCell(cellIndex++).setCellValue(""); // CVE ID
                row.createCell(cellIndex++).setCellValue(""); // CVSS Base Score
                row.createCell(cellIndex++).setCellValue(""); // CVSS Severity
                row.createCell(cellIndex++).setCellValue(rootNode.path("metadata").path("authors").path(0).path("name").asText(""));
                row.createCell(cellIndex++).setCellValue(rootNode.path("metadata").path("timestamp").asText(""));
                row.createCell(cellIndex++).setCellValue(rootNode.path("specVersion").asText(""));
                row.createCell(cellIndex++).setCellValue(rootNode.path("bomFormat").asText(""));
                row.createCell(cellIndex++).setCellValue(rootNode.path("serialNumber").asText(""));
            }

            try (FileOutputStream fileOut = new FileOutputStream(outputExcelPath)) {
                workbook.write(fileOut);
            }

            workbook.close();
            System.out.println("Excel 파일이 생성되었습니다: " + outputExcelPath);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}