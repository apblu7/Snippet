const messagesEl = document.getElementById("messages");
const inputEl = document.getElementById("input");
const sendBtn = document.getElementById("send");
const modelSelect = document.getElementById("model");
const historyEl = document.getElementById("history");
const newChatBtn = document.getElementById("new-chat");

let history = JSON.parse(localStorage.getItem("chat-history") || "{}");
let currentSessionId = null;

function saveHistory() {
  localStorage.setItem("chat-history", JSON.stringify(history));
}

function renderMessages() {
  messagesEl.innerHTML = "";
  const session = history[currentSessionId] || [];
  session.forEach((msg) => {
    const div = document.createElement("div");
    div.className = "message " + msg.role;
    div.textContent = msg.content;
    messagesEl.appendChild(div);
  });
  messagesEl.scrollTop = messagesEl.scrollHeight;
}

function updateSidebar() {
  historyEl.innerHTML = "";
  for (const id in history) {
    const div = document.createElement("div");
    div.className = "session";
    div.innerHTML = `<span>${id}</span><span class="delete">×</span>`;
    div.onclick = () => {
      currentSessionId = id;
      renderMessages();
    };
    div.querySelector(".delete").onclick = (e) => {
      e.stopPropagation();
      delete history[id];
      saveHistory();
      updateSidebar();
      if (currentSessionId === id) {
        currentSessionId = null;
        messagesEl.innerHTML = "";
      }
    };
    historyEl.appendChild(div);
  }
}

function createNewSession() {
  const model = modelSelect.value;
  const now = new Date().toLocaleString();
  const id = `세션 (${now})`;
  history[id] = [
    {
      role: "system",
      content: `새 채팅이 시작되었습니다.\n모델: ${model}\n시작 시간: ${now}`
    }
  ];
  history = { [id]: history[id], ...history };
  currentSessionId = id;
  saveHistory();
  localStorage.setItem("selectedSession", currentSessionId);
  updateSidebar();
  renderMessages();
}

async function sendMessage() {
  const message = inputEl.value.trim();
  if (!message || !currentSessionId) return;

  const model = modelSelect.value;
  const session = history[currentSessionId];
  session.push({ role: "user", content: message });
  renderMessages();
  inputEl.value = "";

  const payload = {
    model,
    messages: session,
  };

  const res = await fetch("https://api.openai.com/v1/chat/completions", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      "Authorization": "Bearer sk-...YOUR_API_KEY..."
    },
    body: JSON.stringify(payload)
  });

  const data = await res.json();
  const reply = data.choices?.[0]?.message?.content || "[응답 오류]";
  session.push({ role: "assistant", content: reply });
  saveHistory();
  renderMessages();
}

sendBtn.onclick = sendMessage;

inputEl.addEventListener('keydown', function(event) {
  if (event.key === 'Enter' && event.shiftKey) {
    const cursorPosition = this.selectionStart;
    const value = this.value;
    this.value = value.substring(0, cursorPosition) + '\n' + value.substring(cursorPosition);
    event.preventDefault();
  } else if (event.key === 'Enter') {
    event.preventDefault();
    sendMessage();
  }
});

newChatBtn.onclick = createNewSession;

updateSidebar();

function loadSession() {
  let sessions = Object.keys(history);
  if (sessions.length > 0) {
    currentSessionId = sessions[0];
    renderMessages();
  }
}

window.onload = () => {
  loadSession();
};