import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;

public class SbomToNisExcel {
    public static void main(String[] args) {
        String inputJsonPath = "C:\\path\\to\\bom.json";    // 입력 JSON 경로
        String outputExcelPath = "C:\\path\\to\\bom.xlsx";  // 출력 엑셀 경로

        List<String> headers = Arrays.asList(
                "SBOM Standard", "SBOM Type", "CycloneDX No.", "SPDX Doc. ID", "SBOM ID",
                "Product Name", "Product Version", "Component Name", "Component Alias", "Component Version",
                "Component Supplier Name", "Component Hash", "Component Path", "Unique Identifier",
                "Dependency Relationship", "Timestamp", "License Name·Version", "SBOM 생성일시"
        );

        try {
            ObjectMapper mapper = new ObjectMapper();
            JsonNode root = mapper.readTree(new File(inputJsonPath));
            JsonNode components = root.path("components");
            JsonNode dependencies = root.path("dependencies");

            String cyclonedxNo = root.path("serialNumber").asText("");
            String timestamp = root.path("metadata").path("timestamp").asText("");
            String today = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd"));
            String sbomId = "WINITECH-" + today + "-" + UUID.randomUUID().toString().substring(0, 6).toUpperCase();
            String generatedAt = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss"));

            // 의존성 관계 정리: ref -> groupId{version} 목록
            Map<String, List<String>> dependencyMap = new HashMap<>();
            for (JsonNode dep : dependencies) {
                String ref = dep.path("ref").asText();
                List<String> depList = new ArrayList<>();
                for (JsonNode d : dep.path("dependsOn")) {
                    depList.add(d.asText());
                }
                dependencyMap.put(ref, depList);
            }

            // ref(purl) -> groupId{version} 매핑 준비
            Map<String, String> refToGroupVer = new HashMap<>();
            for (JsonNode comp : components) {
                String purl = comp.path("purl").asText("");
                String group = comp.path("group").asText("");
                String version = comp.path("version").asText("");
                if (!purl.isEmpty()) {
                    refToGroupVer.put(purl, group + "{" + version + "}");
                }
            }

            Workbook workbook = new XSSFWorkbook();
            Sheet sheet = workbook.createSheet("NIS-SBOM");
            Row headerRow = sheet.createRow(0);
            for (int i = 0; i < headers.size(); i++) {
                headerRow.createCell(i).setCellValue(headers.get(i));
            }

            int rowIdx = 1;
            for (JsonNode comp : components) {
                Row row = sheet.createRow(rowIdx++);
                int col = 0;

                String name = comp.path("name").asText("");
                String version = comp.path("version").asText("");
                String supplier = comp.path("supplier").asText("");
                String group = comp.path("group").asText("");
                String purl = comp.path("purl").asText("");
                String license = comp.path("licenses").path(0).path("license").path("id").asText("");
                String hash = "";
                JsonNode hashes = comp.path("hashes");
                if (hashes.isArray()) {
                    for (JsonNode h : hashes) {
                        if ("SHA-256".equalsIgnoreCase(h.path("alg").asText())) {
                            hash = h.path("content").asText();
                            break;
                        }
                    }
                }

                String path = "WEB-INF/lib/" + name + "-" + version + ".jar";

                // 종속성 추출
                List<String> deps = dependencyMap.getOrDefault(purl, Collections.emptyList());
                List<String> depShort = new ArrayList<>();
                for (String ref : deps) {
                    String v = refToGroupVer.getOrDefault(ref, "");
                    if (!v.isEmpty()) depShort.add(v);
                }
                String depStr = String.join(", ", depShort);

                row.createCell(col++).setCellValue("CycloneDX");
                row.createCell(col++).setCellValue("Deployed");
                row.createCell(col++).setCellValue(cyclonedxNo);
                row.createCell(col++).setCellValue("");
                row.createCell(col++).setCellValue(sbomId);
                row.createCell(col++).setCellValue("ETS");
                row.createCell(col++).setCellValue("1.0");
                row.createCell(col++).setCellValue(name);
                row.createCell(col++).setCellValue(name); // alias
                row.createCell(col++).setCellValue(version);
                row.createCell(col++).setCellValue(supplier);
                row.createCell(col++).setCellValue(hash);
                row.createCell(col++).setCellValue(path);
                row.createCell(col++).setCellValue(purl);
                row.createCell(col++).setCellValue(depStr);
                row.createCell(col++).setCellValue(timestamp);
                row.createCell(col++).setCellValue(license);
                row.createCell(col++).setCellValue(generatedAt);
            }

            try (FileOutputStream out = new FileOutputStream(outputExcelPath)) {
                workbook.write(out);
                System.out.println("Excel 파일 생성 완료: " + outputExcelPath);
            }
            workbook.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}