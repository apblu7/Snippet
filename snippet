import org.springframework.web.util.UriComponentsBuilder;

import java.net.URI;
import java.util.LinkedHashMap;
import java.util.Map;

public class UriBuilder {
    private final String baseUrl;
    private final Map<String, Param> params = new LinkedHashMap<>();

    private static class Param {
        String value;
        boolean encode;

        Param(String value, boolean encode) {
            this.value = value;
            this.encode = encode;
        }
    }

    private UriBuilder(String baseUrl) {
        this.baseUrl = baseUrl;
    }

    public static UriBuilder from(String baseUrl) {
        return new UriBuilder(baseUrl);
    }

    public UriBuilder addParam(String key, String value, boolean encode) {
        params.put(key, new Param(value, encode));
        return this;
    }

    public URI build() {
        // base URL에서 ? 기준으로 분리
        String[] parts = baseUrl.split("\\?", 2);
        String base = parts[0];
        String existingQuery = parts.length > 1 ? parts[1] : null;

        UriComponentsBuilder builder = UriComponentsBuilder.fromHttpUrl(base);

        StringBuilder rawQuery = new StringBuilder();
        if (existingQuery != null && !existingQuery.isEmpty()) {
            rawQuery.append(existingQuery);
        }

        for (Map.Entry<String, Param> entry : params.entrySet()) {
            String key = entry.getKey();
            Param param = entry.getValue();

            if (param.encode) {
                builder.queryParam(key, param.value);
            } else {
                if (rawQuery.length() > 0) rawQuery.append("&");
                rawQuery.append(key).append("=").append(param.value);
            }
        }

        String encodedPart = builder.build().encode().toUriString();

        if (rawQuery.length() > 0) {
            if (encodedPart.contains("?")) {
                return URI.create(encodedPart + "&" + rawQuery);
            } else {
                return URI.create(encodedPart + "?" + rawQuery);
            }
        } else {
            return URI.create(encodedPart);
        }
    }
}