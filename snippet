package com.example.aop;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.*;
import org.springframework.context.annotation.Conditional;
import org.springframework.core.type.AnnotatedTypeMetadata;
import org.springframework.core.type.Condition;
import org.springframework.core.type.ConditionContext;
import org.springframework.stereotype.Component;

import java.io.InputStream;
import java.util.Properties;

@Aspect
@Component
@Conditional(SchedulerLogAspect.SchedulerLogCondition.class)
public class SchedulerLogAspect {

    @Around("execution(* com.example..*(..))")
    public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable {
        // AOP 로직 (생략 가능)
        return joinPoint.proceed();
    }

    /**
     * log.aop.enabled 프로퍼티가 특정 파일에서 true일 때만 AOP 등록
     */
    public static class SchedulerLogCondition implements Condition {
        @Override
        public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {
            try (InputStream is = getClass().getClassLoader().getResourceAsStream("custom-aop.properties")) {
                if (is == null) return false;

                Properties props = new Properties();
                props.load(is);

                String value = props.getProperty("log.aop.enabled", "false");
                return "true".equalsIgnoreCase(value);
            } catch (Exception e) {
                return false;
            }
        }
    }
}